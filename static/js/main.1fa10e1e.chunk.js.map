{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoList/components/TodoListItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","all","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoListItem","dispatch","currentTodoId","id","todoId","completed","className","classNames","title","onClick","TodoList","length","map","TodoFilter","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","userId","useEffect","getUser","href","email","name","App","selectedTodo","fetchTodos","a","todosFromServer","todosActions","visibleTodos","useMemo","active","toLowerCase","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1fa10e1e.chunk.js","sourcesContent":["export enum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\ntype SetQueryAction = {\n  type: 'query/SET';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'status/SET';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => (\n  { type: 'query/SET', payload: query }\n);\n\nconst setStatus = (status: Status): SetStatusAction => (\n  { type: 'status/SET', payload: status }\n);\n\ntype Action = SetQueryAction | SetStatusAction;\n\nexport const actions = { setQuery, setStatus };\n\nconst initialState: State = {\n  query: '',\n  status: Status.all,\n};\n\nconst filterReducer = (state: State = initialState, action: Action): State => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...state, query: action.payload };\n\n    case 'status/SET':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => (\n  { type: 'todos/SET', payload: todos }\n);\n\nexport const actions = { setTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: SetTodosAction): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../../types/Todo';\nimport { actions } from '../../../features/currentTodo';\n\nimport { useAppDispatch, useAppSelector } from '../../../app/hooks';\n\ntype Props = {\n  todo: Todo,\n};\n\nconst TodoListItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const currentTodoId = useAppSelector(state => state.currentTodo?.id);\n  const { id: todoId, completed } = todo;\n\n  return (\n    <tr\n      key={todoId}\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': currentTodoId === todoId,\n      })}\n    >\n      <td className=\"is-vcentered\">{todoId}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p\n          className={classNames({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(actions.setTodo(todo))}\n        >\n          <span className=\"icon\">\n            <i className={`far ${currentTodoId === todoId ? 'fa-eye-slash' : 'fa-eye'}`} />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default TodoListItem;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\nimport TodoListItem from './components/TodoListItem';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {!todos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(todo => (\n              <TodoListItem todo={todo} key={todo.id} />\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { Status } from '../../types/Status';\nimport { actions } from '../../features/filter';\n\nimport { useAppDispatch } from '../../app/hooks';\n\ntype Props = {\n  query: string;\n  status: string;\n};\n\nexport const TodoFilter: React.FC<Props> = ({ query, status }) => {\n  const dispatch = useAppDispatch();\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    dispatch(actions.setQuery(value));\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.setStatus(event.target.value as Status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleInputChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(actions.setQuery(''))}\n              aria-label=\"clear button\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const { userId, id: todoId, completed } = todo;\n\n  useEffect(() => {\n    if (userId) {\n      getUser(userId).then(setUser);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todoId}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{todo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong\n                className={classNames({\n                  'has-text-success': completed,\n                  'has-text-danger': !completed,\n                })}\n              >\n                {completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { actions as todosActions } from './features/todos';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const { query, status } = useAppSelector(state => state.filter);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      const todosFromServer = await getTodos();\n\n      dispatch(todosActions.setTodos(todosFromServer));\n    };\n\n    fetchTodos();\n  }, []);\n\n  const getVisibleTodos = () => {\n    return todos.filter(todo => {\n      if ((status === Status.active && todo.completed) || (status === Status.completed && !todo.completed)) {\n        return false;\n      }\n\n      return todo.title.toLowerCase().includes(query.toLowerCase());\n    });\n  };\n\n  const visibleTodos = useMemo(getVisibleTodos, [todos, status, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                status={status}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length ? (\n                <TodoList\n                  todos={visibleTodos}\n                />\n              ) : (\n                <Loader />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}